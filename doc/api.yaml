openapi: 3.0.3
info:
  title: WASAphoto API
  description: |-
    This OpenAPI document describes WASAphoto functions
  version: "1"
tags:
  - name: login
  - name: action
  - name: stream

security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier and the username are returned.
      operationId: doLogin
      security: []
      requestBody:
        description: User details
        content:
          application/json:
            schema:
               $ref: "#/components/schemas/Username"
        required: true
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserID"

  /profile:
    parameters:
      - name: username
        in: query
        description: the username of the user that is going to be retrieved
        schema: { $ref: "#/components/schemas/Username" }
        required: true
    get:
      summary: Get user profile by username
      operationId: getUserProfileByUsername
      description: Retrieve the profile of a user by their username.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile"}
        '400':
          description: Bad request (e.g., missing or invalid parameters)
        '404':
          description: Profile not found
        '500':
          description: Internal server error

  /profiles/{user_id}/username:
    parameters:
      - name: user_id
        in: path
        description: the user id of the user that wanted to change his username
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
          
    put:
      tags: ["action"]
      operationId: setMyUserName
      summary: update the username
      description: setting the username to user with this uid 
      requestBody:
        content:
          application/json:
              schema: { $ref: "#/components/schemas/Username" }
      responses:
        "200":
          description: username updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserID" }
              example: { "user_id": 15}
    get:
      summary: Get user profile by username
      description: Retrieve the profile of a user by their username.
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { $ref: "#/components/schemas/Username"}
          description: The user ID of the user making the request
        - name: username
          in: query
          required: true
          schema: { $ref: "#/components/schemas/Username"}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile"}
        '400':
          description: Bad request (e.g., missing or invalid parameters)
        '404':
          description: Profile not found
        '500':
          description: Internal server error



  /profiles/{user_id}/photos/{photo_id}:
    parameters:
      - name: user_id
        in: path
        description: ID of user
        schema: { $ref: "#/components/schemas/UserID"}
        required: true
      - name: photo_id
        in: path
        description: ID of photo
        schema: { $ref: "#/components/schemas/PhotoID"}
        required: true
    delete:
        tags: ["action"]
        operationId: deletePhoto
        summary: user deleting a photo
        description: remove a photo from user profile
        responses:
          "204":
            description: Photo successfully deleted
          "400":
            description: Bad Request - Invalid user_id or photo_id
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: {error: "Error while retrieving user ID from parameters"}
          "401":
            description: Unauthorized - Invalid or missing token
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: {error: "Unauthorized"}
          "404":
            description: Not Found - Photo does not exist
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: {error: "Photo not found"}
          "500":
            description: Internal Server Error - Server encountered an error
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    error:
                      type: string
                      example: {error: "Error while trying to delete photo from database"}
    get:
      tags:
        - action
      operationId: getPhoto
      summary: Retrieve a specific photo by its ID
      description: Get details of a photo uploaded by the user using the photo ID.
      responses:
        '200':
          description: Photo successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPhoto"
              example:
                user_id: 1
                pid: 45
                photo: "base64-encoded-image-data"
                caption: "A beautiful sunset"
                time: "2023-11-21T23:19:59"
        '400':
          description: Bad request (invalid photo ID)
        '404':
          description: Photo not found
        '500':
          description: Internal server error

    put:
      tags: ["action"]
      operationId: followUser
      summary: add new user to followed list
      description: todo
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/User"}
      responses:
        "200":
          description: user successfully added to followed list
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Followed"}
              example: {username: Marco, user_id: 128}

  /profiles/{user_id}/bans/{target_uid}:
    parameters:
      - name: user_id
        in: path
        description: user's id that wants to ban/unban another user
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
      - name: target_uid
        in: path
        description: user's id that is going to be banned/unbanned
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
    put:
      tags: ["action"]
      operationId: banUser
      summary: ban a user
      description: add the target_uid user to user's current_uid banned list
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/User" }
      responses:
        "200":
          description: user successfully added to ban list
          content:
            application/json:
              schema: {$ref: "#/components/schemas/User"}
        "400":
          description: Invalid request (e.g., invalid user_id or target_uid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid user_id or target_uid"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "User not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Internal server error"
    delete:
      tags: ["action"]
      operationId: unbanUser
      summary: unban a user
      description: remove the target_uid user from user's current_uid banned list
      responses:
        "204":
          description: user successfully unbanned
        "400":
          description: Invalid request (e.g., invalid user_id or target_uid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid user_id or target_uid"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "User not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Internal server error"
    get:
      tags: ["action"]
      operationId: getBan
      summary: get the user who banned another user
      responses:
        "200": 
          description: user successfully retrieved
          content:
            application/json:
              schema: {$ref: "#/components/schemas/User"}
        "400":
          description: Invalid request (e.g., invalid user_id or target_uid)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid user_id or target_uid"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "User not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Internal server error"

  /profiles/{user_id}/profile:
    parameters:
      - name: user_id
        in: path
        description: user id's profile to be shown
        schema: {$ref: "#/components/schemas/Username"}
        required: true
    get:
      tags: ["action"]
      operationId: getUserProfile
      summary: getting the user profile
      description: get the user profile from corresponding user id
      responses:
        "200":
          description: user profile successfully get
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Profile"}
              example: {username: Giova, profile_picture: img_path,
                        photos: profile_posts, followers: 500, following: 30}
        "404":
          description: user not found
        "500":
          description: internal server error
  
  /profiles/{user_id}/photos:
    post:
      tags: ["action"]
      operationId: uploadPhoto
      summary: Upload a photo
      description: User uploads a photo to their profile
      parameters:
        - name: user_id
          in: path
          description: ID of the user who wants to upload a photo
          required: true
          schema:
            $ref: "#/components/schemas/UserID"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: 
              $ref: "#/components/schemas/UserPhoto"
      responses:
        '201':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPhoto"
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /profiles/{user_id}/stream:
    parameters:
      - name: user_id
        in: path
        description: "user id that wants to get the stream"
        schema:
          $ref: "#/components/schemas/UserID"
        required: true
    get:
      tags: ["stream"]
      operationId: getMyStream
      summary: "stream of posts from users followed by user"
      description: getting posts from all users followed by user
      responses:
        "200":
          description: stream successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stream"
        "400":
          description: Bad Request - Invalid user id
          content:
            application/json:
              example:
                error: "Invalid user id"
        "404":
          description: Not Found - User not found or no posts in the stream
          content:
            application/json:
              example:
                error: "User not found or no posts available"
        "500":
          description: Internal Server Error - Unable to retrieve the stream
          content:
            application/json:
              example:
                error: "Unable to retrieve the stream due to server error"

  /profiles/{user_id}/likes/{photo_id}:
    parameters:
      - name: user_id
        in: path
        description: user id's that wants to like/unlike or comment/uncomment a post
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
      - name: photo_id
        in: path
        description: photo id's that is receiving a like/comment or deleting it
        schema: {$ref: "#/components/schemas/PhotoID"}
        required: true
    put:
      tags: ["action"]
      operationId: likePhoto
      summary: like a photo
      description: user with current_id adds to Liked list photo id with target_id
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Stream"}
      responses:
        "200":
          description: User successfully liked a photo
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Liked"}
              example: {photo_id: 298}
        "400":
          description: Bad Request - Invalid user_id or target_photoid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example: {error: "Error while retrieving user ID or target photo ID from parameters"}
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example: {error: "Unauthorized"}
        "404":
          description: Not Found - Photo does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example: {error: "Photo not found"}
        "500":
          description: Internal Server Error - Server encountered an error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example: {error: "Internal server error"}
    delete:
      tags: ["action"]
      operationId: unlikePhoto
      summary: remove like from photo
      description: user with current_id removes from Liked list photo id with target_id
      responses:
        "204":
          description: User successfully removed a like from photo
        "400":
          description: Bad Request - Invalid user_id or target_photoid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example: {error: "Error while retrieving user ID or target photo ID from parameters"}
        "401":
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example: {error: "Unauthorized"}
        "404":
          description: Not Found - Photo does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example: {error: "Photo not found"}
        "500":
          description: Internal Server Error - Server encountered an error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                example: {error: "Internal server error"}

  /photos/{photo_id}/likes:
    parameters:
      - name: photo_id
        in: path
        description: ID of the photo to retrieve likes for
        required: true
        schema: { $ref: "#/components/schemas/PhotoID" }

    get:
      tags: ["action"]
      summary: Retrieve likes for a photo
      description: |
        Retrieve a list of users who liked the specified photo.
      operationId: getLikes
      responses:
        "200":
          description: Successfully retrieved the list of likes
          content:
            application/json:
              schema:
                type: object
                properties:
                  likes:
                    type: array
                    description: The list of users who liked the photo
                    items:
                      type: object
                      properties:
                        user_id:
                          $ref: "#/components/schemas/UserID"
                        username:
                          $ref: "#/components/schemas/Username"
        "400":
          description: Bad request. The request could not be understood or was missing required parameters.
        "401":
          description: Unauthorized. Authentication is required and has failed or has not been provided.
        "404":
          description: Not found. The specified photo could not be found.
        "500":
          description: Internal server error. An error occurred on the server.
   
    # post:
    #     tags: ["action"]
    #     operationId: commentPhoto
    #     summary: Comment on a photo
    #     description: User with `user_id` adds a comment to the specified photo.
    #     requestBody:
    #       content:
    #         application/json:
    #           schema: 
    #             $ref: "#/components/schemas/Comment"
    #     responses:
    #       "200":
    #         description: User successfully commented on the photo
    #         content:
    #           application/json:
    #             schema:
    #               $ref: "#/components/schemas/Comment"
    #             example: 
    #               comment_id: 7
    #               comment_text: "good panorama!"
    #       "400":
    #         description: User not found or bad request



  /profiles/{user_id}/comments/{photo_id}:
    parameters:
      - name: user_id
        in: path
        description: The user ID of the user who will receive the comment.
        schema: {  $ref: "#/components/schemas/UserID" }
        required: true
      - name: photo_id
        in: path
        description: The photo ID on which the comment is made.
        schema: { $ref: "#/components/schemas/PhotoID" }
        required: true
    
    post:
      tags:
        - action
      operationId: commentPhoto
      summary: Comment on a photo
      description: Adds a comment to the list of comments on a photo for a user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
            examples:
              example1:
                value:
                  comment_text: "good panorama!"
      responses:
        '200':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
              example:
                comment_id: 7
                comment_text: "good panorama!"
        '400':
          description: Bad request, possibly invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: integer
                    description: The HTTP error code
                  error_message:
                    type: string
                    description: A description of the error
                required:
                  - error_code
                  - error_message
              example:
                error_code: 400
                error_message: "Invalid comment data"
        '404':
          description: User or photo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: integer
                    description: The HTTP error code
                  error_message:
                    type: string
                    description: A description of the error
                required:
                  - error_code
                  - error_message
              example:
                error_code: 404
                error_message: "User or photo not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: integer
                    description: The HTTP error code
                  error_message:
                    type: string
                    description: A description of the error
                required:
                  - error_code
                  - error_message
              example:
                error_code: 500
                error_message: "Server error"
                
    delete:
      tags:
        - action
      operationId: uncommentPhoto
      summary: Remove a comment from a photo
      description: Removes a comment from the list of comments on a photo for a user.
      responses:
        '200':
          description: Comment removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentID'
              example:
                comment_id: 7
        '400':
          description: Bad request, possibly invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: integer
                    description: The HTTP error code
                  error_message:
                    type: string
                    description: A description of the error
                required:
                  - error_code
                  - error_message
              example:
                error_code: 400
                error_message: "Invalid comment ID"
        '404':
          description: Comment or user/photo not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: integer
                    description: The HTTP error code
                  error_message:
                    type: string
                    description: A description of the error
                required:
                  - error_code
                  - error_message
              example:
                error_code: 404
                error_message: "Comment or user/photo not found"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: integer
                    description: The HTTP error code
                  error_message:
                    type: string
                    description: A description of the error
                required:
                  - error_code
                  - error_message
              example:
                error_code: 500
                error_message: "Server error"
                

  /profiles/{user_id}/photos/{photo_id}/comments:
    parameters:
      - name: user_id
        in: path
        description: The user ID of the profile that owns the photo
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
      - name: photo_id
        in: path
        description: The photo ID for which comments are being retrieved
        schema: { $ref: "#/components/schemas/PhotoID" }
        required: true
    get:
      tags: ["action"]
      operationId: getPhotoComments
      summary: Retrieve all comments for a photo
      description: Get all comments associated with a specific photo owned by a user
      responses:
        "200":
          description: List of comments for the specified photo
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
                required:
                  - comments
              example:
                comments:
                  - comment_id: 1
                    comment_text: "Great photo!"
                    user_id: 5
                    timestamp: "2024-08-01T12:34:56Z"
                  - comment_id: 2
                    comment_text: "Love this view!"
                    user_id: 8
                    timestamp: "2024-08-01T13:22:10Z"
        "404":
          description: Photo not found or no comments available
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No comments found for this photo."

  
  /profiles/{user_id}/following/{following_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        schema: { $ref: "#/components/schemas/UserID" }
      - name: following_id
        in: path
        required: true
        schema: { $ref: "#/components/schemas/UserID" }
    put:
      summary: Follow a user
      description: Follow a user specified by the following_id.
      responses:
        '200':
          description: Successfully followed the user
        '400':
          description: Invalid user_id or following_id
        '401':
          description: Unauthorized
    delete:
      summary: Unfollow a user
      description: Unfollow a user specified by the following_id.
      responses:
        '200':
          description: Successfully unfollowed the user
        '400':
          description: Invalid user_id or following_id
        '401':
          description: Unauthorized

  /profiles/{user_id}/followers:
    parameters:
      - name: user_id
        in: path
        description: The user ID of the profile whose followers are being retrieved
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
    get:
      tags: ["action"]
      operationId: getUserFollowers
      summary: Retrieve all followers of a user
      description: Get all followers associated with a specific user
      responses:
        "200":
          description: List of followers for the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  followers:
                    type: array
                    description: A list of followers for the user
                    items:
                      $ref: "#/components/schemas/User"
                required:
                  - followers
        "404":
          description: User not found or no followers available
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No followers found for this user."

 
  /profiles/{user_id}/following:
    get:
      summary: Retrieve all users that the user follows
      description: Get a list of users that are followed by the user identified by the user_id.
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user whose followers are to be retrieved
          schema: { $ref: "#/components/schemas/UserID" }
      responses:
        '200':
          description: A list of users that are followed the specified user
          content:
            application/json:
              schema:
                type: object
                properties:
                  followers:
                    type: array
                    description: A list of followers for the user
                    items:
                      $ref: "#/components/schemas/User"
                required:
                  - followers
        '400':
          description: Invalid user_id supplied

        '404':
          description: User not found

  /profiles/{user_id}/ban:
    parameters:
      - name: user_id
        in: path
        description: The user's ID whose ban list is to be retrieved
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
    get:
      tags: ["action"]
      operationId: getBanList
      summary: Get a user's ban list
      description: Retrieve the list of users banned by the specified user
      responses:
        "200":
          description: Successfully retrieved the ban list
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Banned"}
        "400":
          description: Invalid request (e.g., invalid user_id)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Invalid user_id"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "User not found"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: "Internal server error"

#COMPONENTS
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    CommentID:
      title: Comment ID 
      description: id of a comment
      type: object
      properties:
        id:
          description: id of a comment
          type: integer
          example: 58
        
    CommentText:
      title: Comment Text
      description: a string representing a text under a post
      type: object
      properties:
        text:
          type: string
          description: a string representing a text under a post
          example: hey,nice photo
          pattern: '^[^\/\\]{1,64}$'
          maxLength: 100
          minLength: 1
      
    Comment:
      title: Comment
      description: "text added from users to posts"
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        comment_id:
          $ref: "#/components/schemas/CommentID"
        comment_text:
          $ref: "#/components/schemas/CommentText"
        timestamp:
          type: string
          description: date and time when the comment is posted
          format: date-time
          example: "2010-01-20T16:10:19Z"
          minLength: 20
          maxLength: 20
          readOnly: true
        
      
    Liked:
      title: Liked list
      description: list of all liked photos
      type: object
      properties:
        photo_id:
          type: array
          description: list of all liked photos
          items: {$ref: "#/components/schemas/PhotoID"}
          minItems: 0
          maxItems: 10000000
      
    Photos:
      title: User photos
      description: an array of user's photos
      type: object
      properties:
        user_post:
          type: array
          description: an array of user's photos
          items: {$ref: "#/components/schemas/UserPhoto"}
          minItems: 0
          maxItems: 10000000
    
    PhotoID:
      title: photo id
      description: "photo identificator"
      type: object
      properties:
        id:
          type: integer
          example: 45
      
    Followed:
      title: Followed list
      description: list of users' names and IDs followed by user
      type: object
      properties:
        user:
          type: array
          description: list of users' names and IDs followed by user
          items: 
            oneOf:
              - {$ref: "#/components/schemas/Username"}
              - {$ref: "#/components/schemas/UserID"}
          minItems: 0
          maxItems: 10000000
      
    Banned:
      title: Ban list
      description: list of users' names and IDs banned by user
      type: object
      properties:
        user:
          type: array
          description: list of users' names and IDs banned by user
          items:
            oneOf:
              - $ref: "#/components/schemas/Username"
              - $ref: "#/components/schemas/UserID"
          minItems: 0
          maxItems: 10000000

    UserPhoto:
      title: User Photo
      description: Details of an uploaded photo
      type: object
      properties:
        photo_id: {$ref: "#/components/schemas/PhotoID"}
        user_id: {$ref: "#/components/schemas/UserID"}
        image:
          $ref: '#/components/schemas/Image'
        timestamp:
          type: string
          description: date and time when the image was posted
          format: date-time
          example: "2010-09-20T16:10:19Z"
          minLength: 20
          maxLength: 20
          readOnly: true
        likecount:
          description: number of likes that the photo received
          type: integer
          example: 10
          minimum: 0
          readOnly: true
        commentcount:
          description: number of comments that the photo received
          type: integer
          example: 10
          minimum: 0
          readOnly: true
        liked:
          description: flag that retrieves if the users liked to the photo
          type: boolean
          example: false
          readOnly: true
        caption: {$ref: "#/components/schemas/Caption"}
        time:
          title: time
          description: pubblication time
          type: string
          format: date-time
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$"
          example: "2023-11-21T23:19:59"
          minLength: 19
          maxLength: 19
          
    Image: 
          title: photo
          description: base 64 image.
          type: string
          format: byte
          minLength: 1
          maxLength: 1000000000
           
    Caption:
          description: "description of a photo"
          type: string
          pattern: '^[^\/\\]{1,64}$'
          example: "look at me!"
          minLength: 0
          maxLength: 50
    Stream:
        title: Stream
        description: array of User photos
        type: object
        properties:
          user_post:
            type: array
            description: array of User photos
            items: {$ref: "#/components/schemas/UserPhoto"}
            minItems: 0
            maxItems: 10000000
          
    UserID:
      title: User ID
      description: "this is the user id"
      type: object
      properties:
        id:
          description: "user identificator number"
          type: integer
          example: 1
#          readOnly: true
      
    Username:
      title: Username
      description: "this is the user's name"
      type: object
      properties:
        username:
          type: string
          description: "name of the user"
          example: "simone"
          pattern: '^[a-z][a-z0-9]*$'
          minLength: 3
          maxLength: 16
      
    User:
      title: User
      description: "all informations about User"
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UserID"
        username:
          $ref: "#/components/schemas/Username"

          
    Profile:
      title: Profile
      description: "User profile"
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        followers:
          title: followers
          description: users number followed by user
          type: integer
          example: 400
        following:
          title: following
          description: users number following the user
          type: integer
          example: 700
        photocount:
          type: integer
          description: The number of photos posted by the user
          example: 12
          minimum: 0
          readOnly: true
    
        
      

        