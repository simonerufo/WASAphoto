openapi: 3.0.3
info:
  title: WASAphoto API
  description: |-
    This OpenAPI document describes WASAphoto functions
  version: "1"
tags:
  - name: login
  - name: action
  - name: stream

security:
  - bearerAuth: []

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier and the username are returned.
      operationId: doLogin
      security: []
      requestBody:
        description: User details
        content:
          application/json:
            schema:
               $ref: "#/components/schemas/Username"
        required: true
      responses:
        '200':
          description: User log-in action successful
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/UserID"
              example: {"user_id": 17}
  /profiles/{user_id}/username:
    parameters:
      - name: user_id
        in: path
        description: the user id of the user that wanted to change his username
        schema: { $ref: "#/components/schemas/UserID" }
        required: true
          
    put:
      tags: ["action"]
      operationId: setMyUserName
      summary: update the username
      description: setting the username to user with this uid 
      requestBody:
        content:
          application/json:
              schema: { $ref: "#/components/schemas/Username" }
      responses:
        "200":
          description: username updated successfully
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UserID" }
              example: { "user_id": 15}
    get:
      summary: Get user profile by username
      description: Retrieve the profile of a user by their username.
      parameters:
        - name: user_id
          in: path
          required: true
          schema: { $ref: "#/components/schemas/Username"}
          description: The user ID of the user making the request
        - name: username
          in: query
          required: true
          schema: { $ref: "#/components/schemas/Username"}
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile"}
        '400':
          description: Bad request (e.g., missing or invalid parameters)
        '404':
          description: Profile not found
        '500':
          description: Internal server error



  /profiles/{user_id}/{photo_id}:
    parameters:
      - name: user_id
        in: path
        description: id of user that wants to upload a photo
        schema: { $ref: "#/components/schemas/UserID"}
        required: true
      - name: photo_id
        in: path
        description: id of photo that's going to be uploaded
        schema: { $ref: "#/components/schemas/UserID"}
        required: true
#    post:
#      tags: ["action"]
#      operationId: uploadPhoto
#      summary: user uploading a photo on his profile
#      description: user uploading a photo on his profile
#      requestBody:
#        content:
#          application/json:
#            schema: {$ref: "#/components/schemas/UserPhoto"}
#      responses:
#       "201":
#        description: Photo successfully uploaded on profile
#        content:
#          application/json:
#            schema: {$ref: "#/components/schemas/PhotoID"}
#            example: {pid: 185}
    delete:
      tags: ["action"]
      operationId: deletePhoto
      summary: user deleting a photo
      description: remove a photo from user profile
      responses:
        "200":
          description: photo successfully deleted
          content:
            application/json: 
              schema: {$ref: "#/components/schemas/PhotoID"}
              example: {pid: 185}
  /profiles/{user_id}/followed/{target_uid}:
    parameters:
      - name: user_id
        in: path
        description: user's id that wants to follow/unfollow another user
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
      - name: target_uid
        in: path
        description: user's id that is going to be followed/unfollowed
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
    put:
      tags: ["action"]
      operationId: followUser
      summary: add new user to followed list
      description: todo
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/User"}
      responses:
        "200":
          description: user successfully added to followed list
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Followed"}
              example: {username: Marco, user_id: 128}
    delete:
      tags: ["action"]
      operationId: unfollowUser
      summary: "unfollow a user"
      description: removing from the followed list a user
      responses:
       "204":
          description: user successfully unfollowed
  /profiles/{user_id}/bans/{target_uid}:
    parameters:
      - name: user_id
        in: path
        description: user's id that wants to ban/unban another user
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
      - name: target_uid
        in: path
        description: user's id that is going to be banned/unbanned
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
    put:
      tags: ["action"]
      operationId: banUser
      summary: ban a user
      description: add the target_uid user to user's current_uid banned list
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/User"}
      responses:
        "200":
          description: user successfully added to ban list
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Banned"}
              example: {username: lollo, user_id: 67}
    delete:
      tags: ["action"]
      operationId: unbanUser
      summary: "unban a user"
      description: remove the target_uid user from user's current_uid banned list
      responses:
        "204":
          description: user successfully unbanned
  /profiles/{user_id}/profile:
    parameters:
      - name: user_id
        in: path
        description: user id's profile to be shown
        schema: {$ref: "#/components/schemas/Username"}
        required: true
    get:
      tags: ["action"]
      operationId: getUserProfile
      summary: getting the user profile
      description: get the user profile from corresponding user id
      responses:
        "200":
          description: user profile successfully get
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Profile"}
              example: {username: Giova, profile_picture: img_path,
                        photos: profile_posts, followers: 500, following: 30}
        "404":
          description: user not found
    post:
      tags: ["action"]
      operationId: uploadPhoto
      summary: user uploading a photo on his profile
      description: user uploading a photo on his profile
      requestBody:
        content:
          multipart/form-data:
            schema: 
              description: photo and caption of the post
              type: object
              properties:
                image: {$ref : "#/components/schemas/Image"}
                caption: {$ref : "#/components/schemas/Caption"}

      responses:
          "201":
            description: Photo successfully uploaded on profile
            content:
              application/json:
                schema: {$ref: "#/components/schemas/PhotoID"}
                example: {pid: 185}

  /profiles/{user_id}/stream:
    parameters:
      - name: user_id
        in: path
        description: "user id that wants to get the stream"
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
    get:
      tags: ["stream"]
      operationId: getMyStream
      summary: "stream of posts from users followed by user"
      description: getting posts from all users followed by user
      responses:
        "200":
          description: stream successfully retrieved
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Stream"}
              example: {user_post: posts from user}
  /profiles/{user_id}/likes/{target_photoid}:
    parameters:
      - name: user_id
        in: path
        description: user id's that wants to like/unlike or comment/uncomment a post
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
      - name: target_photoid
        in: path
        description: photo id's that is receiving a like/comment or deleting it
        schema: {$ref: "#/components/schemas/PhotoID"}
        required: true
    put:
      tags: ["action"]
      operationId: likePhoto
      summary: like a photo
      description: user with current_id adds to Liked list photo id with target_id
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Stream"}
      responses:
        "200":
          description: user successfully liked a photo
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Liked"}
              example: {photo_id: 298}
    delete:
      tags: ["action"]
      operationId: unlikePhoto
      summary: remove like from photo
      description: user with current_id removes from Liked list photo id with target_id
      responses:
        "200":
          description: user successfully removed a like from photo 
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Liked"}
              example: {photo_id: 298}
  /profiles/{target_id}/comments/{target_photoid}:
    parameters:
      - name: user_id
        in: path
        description: user id's that is going to receive a comment
        schema: {$ref: "#/components/schemas/UserID"}
        required: true
      - name: target_photoid
        in: path
        description: photo id's that is receiving a comment
        schema: {$ref: "#/components/schemas/PhotoID"}
        required: true
    post:
      tags: ["action"]
      operationId: commentPhoto
      summary: comment a photo
      description: user with current_id adds to Comments list of user with target_id    
      requestBody:
        content:
          application/json:
            schema: {$ref: "#/components/schemas/Comment"}
      responses:
        "200":
          description: user successfully commented post
          content:
            application/json:
              schema: {$ref: "#/components/schemas/Comment"}
              example: {comment_id: 7, comment_text: "good panorama!"}

    delete:
      tags: ["action"]
      operationId: uncommentPhoto
      summary: remove a comment from photo
      description: user with current_id removes from user's comment list with target_id
      responses:
        "200":
          description: user successfully removed a comment from photo 
          content:
            application/json:
              schema: {$ref: "#/components/schemas/CommentID"}
              example: {comment_id: 7}
          
#COMPONENTS
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    CommentID:
      title: Comment ID 
      description: id of a comment
      type: object
      properties:
        id:
          description: id of a comment
          type: integer
          example: 58
        
    CommentText:
      title: Comment Text
      description: a string representing a text under a post
      type: object
      properties:
        text:
          type: string
          description: a string representing a text under a post
          example: hey,nice photo
          pattern: '^[^\/\\]{1,64}$'
          maxLength: 100
          minLength: 1
      
    Comment:
      title: Comment
      description: "text added from users to posts"
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        comment_id:
          $ref: "#/components/schemas/CommentID"
        comment_text:
          $ref: "#/components/schemas/CommentText"
        
        
      
    Liked:
      title: Liked list
      description: list of all liked photos
      type: object
      properties:
        photo_id:
          type: array
          description: list of all liked photos
          items: {$ref: "#/components/schemas/PhotoID"}
          minItems: 0
          maxItems: 10000000
      
    Photos:
      title: User photos
      description: an array of user's photos
      type: object
      properties:
        user_post:
          type: array
          description: an array of user's photos
          items: {$ref: "#/components/schemas/UserPhoto"}
          minItems: 0
          maxItems: 10000000
    
    PhotoID:
      title: photo id
      description: "photo identificator"
      type: object
      properties:
        id:
          type: integer
          example: 45
      
    Followed:
      title: Followed list
      description: list of users' names and IDs followed by user
      type: object
      properties:
        user:
          type: array
          description: list of users' names and IDs followed by user
          items: 
            oneOf:
              - {$ref: "#/components/schemas/Username"}
              - {$ref: "#/components/schemas/UserID"}
          minItems: 0
          maxItems: 10000000
      
    Banned:
      title: Ban list
      description: list of users' names and IDs banned by user
      type: object
      properties:
        user:
          type: array
          description: list of users' names and IDs banned by user
          items:
            oneOf:
              - {$ref: "#/components/schemas/Username"}
              - {$ref: "#/components/schemas/UserID"}
          minItems: 0
          maxItems: 10000000
    
    UserPhoto:
      title: User photo
      description: photo uploaded by the user
      properties:
        user_id: {$ref: "#/components/schemas/UserID"}
        pid: {$ref: "#/components/schemas/PhotoID"}
        photo: {$ref: "#/components/schemas/Image"}
#          title: photo path
#          description: "describes the path of a photo"
#          type : string
#          pattern: '^\/(?:[\w]+\/)*[\w]+\.[a-zA-Z]{2,}$'
#          example: "path/images/photo.png"
#          minLength: 1
#          maxLength: 100
          
        caption: {$ref: "#/components/schemas/Caption"}
          
#        likes_number:
#          title: likes number
#          description: "number of likes received from users"
#          type: integer
#          example: 500
#        comments_number:
#          title: comments number
#          description: "number of comments received from users"
#          type: integer
#          example: 5
#        comments_list:
#          title: comments list
#          description: array of Comment
#          type: array
#          items: {$ref: "#/components/schemas/Comment"}
#          minItems: 0
#          maxItems: 10000000
        time:
          title: time
          description: pubblication time
          type: string
          format: date-time
          pattern: "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}$"
          example: "2023-11-21T23:19:59"
          minLength: 19
          maxLength: 19
          
    Image: 
          title: photo
          description: base 64 image.
          type: string
          format: byte
          minLength: 0
          maxLength: 1000000000
           
    Caption:
          description: "description of a photo"
          type: string
          pattern: '^[^\/\\]{1,64}$'
          example: "look at me!"
          minLength: 0
          maxLength: 50
    Stream:
        title: Stream
        description: array of User photos
        type: object
        properties:
          user_post:
            type: array
            description: array of User photos
            items: {$ref: "#/components/schemas/UserPhoto"}
            minItems: 0
            maxItems: 10000000
          
    UserID:
      title: User ID
      description: "this is the user id"
      type: object
      properties:
        id:
          description: "user identificator number"
          type: integer
          example: 1
#          readOnly: true
      
    Username:
      title: Username
      description: "this is the user's name"
      type: object
      properties:
        username:
          type: string
          description: "name of the user"
          example: "Simone"
          pattern: '^[a-z][a-z0-9]*$'
          minLength: 3
          maxLength: 16
      
    User:
      title: User
      description: "all informations about User"
      type: object
      properties:
        uid:
          $ref: "#/components/schemas/UserID"
        username:
          $ref: "#/components/schemas/Username"
#        follow_list:
#          $ref: "#/components/schemas/Followed"
#        ban_list:
#          $ref: "#/components/schemas/Banned"
#        liked_list:
#          $ref: "#/components/schemas/Liked"
          
    Profile:
      title: Profile
      description: "User profile"
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        profile_picture:
          $ref: "#/components/schemas/UserPhoto"
        photos:
          $ref: "#/components/schemas/Photos"
        followers:
          title: followers
          description: users number followed by user
          type: integer
          example: 400
        following:
          title: following
          description: users number following the user
          type: integer
          example: 700
    
        
      

        